apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: ray-operator
  namespace: ray-system
  annotations:
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`ray-operator.local.reinthal.cc`)
      kind: Rule
      services:
        - name: kuberay-operator
          port: 8080
  tls:
    secretName: local-reinthal-cc-tls
---
apiVersion: traefik.io/v1alpha1
kind: Middleware
metadata:
  name: ray-dashboard-basicauth
  namespace: ray-system
spec:
  basicAuth:
    secret: ray-dashboard-auth
---
apiVersion: v1
kind: Secret
metadata:
  name: ray-dashboard-auth
  namespace: ray-system
type: Opaque
data:
  users: a29nOiQyeSQxMiQwV29vN05mZEZPUXR5VEJ1dWhjRldPdlhZM1djTlVZamxvQ2lvdVE2RnRzcW8zQ0FiQW4vTw== # Same as your Dagster auth
---
apiVersion: traefik.io/v1alpha1
kind: IngressRoute
metadata:
  name: ray-dashboard
  namespace: ray-system
  annotations:
    kubernetes.io/ingress.class: traefik-external
spec:
  entryPoints:
    - websecure
  routes:
    - match: Host(`ray-dash.local.reinthal.cc`)
      kind: Rule
      middlewares:
        - name: ray-dashboard-basicauth
          namespace: ray-system
      services:
        - name: raycluster-kuberay-head-svc # This will be created by the Ray cluster
          port: 8265
  tls:
    secretName: local-reinthal-cc-tls
